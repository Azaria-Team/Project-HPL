apply plugin: "java"
version '1.0'

targetCompatibility = 8
sourceCompatibility = JavaVersion.VERSION_17

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven { url 'https://maven.xpdustry.com/anuken' }
    maven{ url 'https://www.jitpack.io' }
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v146'
    jabelVersion = "93fde537c7"
    //windows sucks
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}


//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies {

    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"
    implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    implementation "com.github.Zelaux.ZelauxModCore:core:$zelauxCoreVersion"

    implementation 'com.google.code.gson:gson:2.10.1'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$zelauxCoreVersion"
}

//force arc version
configurations.all{
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        def sdkRoot = file(
                System.getenv('ANDROID_SDK_ROOT') ?: System.getenv('ANDROID_HOME') ?:
                        { throw new GradleException('Neither `ANDROID_SDK_ROOT` nor `ANDROID_HOME` is set') }
        )

        // Find `d8`.
        def d8 = file("$sdkRoot/build-tools/$androidBuildVersion/d8")
        if(!d8.exists()){
            throw new GradleException("Android SDK `build-tools;$androidBuildVersion` isn't installed or is corrupted")
        }

        // Initialize a release build.
        def input = desktopJar.get().asFile
        def command = "$d8 --release --min-api $androidMinVersion --output $dexJar $input"

        // Include all compile and runtime classpath.
        (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList()).forEach{
            if(it.exists()) command = "$command --classpath $it"
        }

        // Include Android platform as library.
        def androidJar = file("$sdkRoot/platforms/android-$androidSdkVersion/android.jar")
        if(!androidJar.exists()){
            throw new GradleException("Android SDK `platforms;android-$androidSdkVersion` isn't installed or is corrupted")
        }

        command = "$command --lib $androidJar"
        if(OS.isWindows) command = "cmd /c $command"

        // Run `d8`.
        logger.log(LogLevel.LIFECYCLE, 'Running `d8`.')
        command.execute(null, layout.projectDirectory.asFile).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${base.archivesBaseName}Desktop.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
        include "icon.png"
    }

    from("assets/"){
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${base.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
